# HARDN-XDR Central Logging Module

# Function to install required logging packages
install_logging_packages() {
        local logging_packages="rsyslog logrotate"
        HARDN_STATUS "info" "Checking and installing logging packages ($logging_packages)..."

        # Check if packages are already installed - early return if they are
        # shellcheck disable=SC2086
        if dpkg -s $logging_packages >/dev/null 2>&1; then
            HARDN_STATUS "pass" "Logging packages are already installed."
            return 0
        fi

        # Packages need to be installed
        HARDN_STATUS "info" "Installing missing logging packages..."

        # Use logical operators for conditional execution
        # shellcheck disable=SC2086
        if apt update >/dev/null 2>&1 && apt install -y $logging_packages >/dev/null 2>&1; then
            HARDN_STATUS "pass" "Logging packages installed successfully."
            return 0
        else
            HARDN_STATUS "error" "Error: Failed to install logging packages. Skipping central logging configuration."
            return 1
        fi
}

# Function to create log directories and set permissions
setup_log_directories() {
        HARDN_STATUS "info" "Creating log directories and files..."

        # Create main log directory
        mkdir -p /usr/local/var/log/suricata

        # Create and set permissions for the central log file
        touch /usr/local/var/log/suricata/hardn-xdr.log
        chmod 640 /usr/local/var/log/suricata/hardn-xdr.log
        chown root:adm /usr/local/var/log/suricata/hardn-xdr.log

        HARDN_STATUS "pass" "Log directory /usr/local/var/log/suricata created and permissions set."
        return 0
}

# Function to configure rsyslog for centralized logging
configure_rsyslog() {
    HARDN_STATUS "info" "Creating rsyslog configuration file /etc/rsyslog.d/30-hardn-xdr.conf..."

    cat > /etc/rsyslog.d/30-hardn-xdr.conf << 'EOF'
# HARDN-XDR Central Logging Configuration
# This file is automatically generated by HARDN-XDR.
# Any manual changes may be overwritten.

# Create a template for security logs
$template HARDNFormat,"%TIMESTAMP% %HOSTNAME% %syslogtag%%msg%\n"

# Define the central log file path
local5.* /usr/local/var/log/suricata/hardn-xdr.log;HARDNFormat

# Specific rules to route logs to local5 facility if they don't use it by default
# Suricata (often uses local5, but explicit rule ensures it)
if $programname == 'suricata' then local5.*
# AIDE
if $programname == 'aide' then local5.*
# Fail2Ban
if $programname == 'fail2ban' then local5.*
# AppArmor
if $programname == 'apparmor' then local5.*
# Auditd/SELinux (auditd logs via auditd, setroubleshoot logs via setroubleshoot)
if $programname == 'audit' or $programname == 'setroubleshoot' then local5.*
# RKHunter (often logs with tag rkhunter)
if $programname == 'rkhunter' or $syslogtag contains 'rkhunter' then local5.*
# Debsums (piped to logger, tag might be debsums or CRON)
if $programname == 'debsums' or $syslogtag contains 'debsums' then local5.*
# Lynis (cronjob logs via logger, tag might be lynis or CRON)
if $programname == 'lynis' or $syslogtag contains 'lynis' then local5.*

# Stop processing these messages after they are sent to the central log
& stop
EOF

    chmod 644 /etc/rsyslog.d/30-hardn-xdr.conf
    HARDN_STATUS "pass" "Rsyslog configuration created/updated."
    return 0
}

# Function to configure logrotate for the central log
configure_logrotate() {
    HARDN_STATUS "info" "Creating logrotate configuration file /etc/logrotate.d/hardn-xdr..."

    cat > /etc/logrotate.d/hardn-xdr << 'EOF'
/usr/local/var/log/suricata/hardn-xdr.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    create 640 root adm
    postrotate
        # Ensure rsyslog reloads its configuration or reopens log files
        # Use the standard rsyslog-rotate script if available, otherwise restart
        if [ -x /usr/lib/rsyslog/rsyslog-rotate ]; then
            /usr/lib/rsyslog/rsyslog-rotate
        else
            systemctl reload rsyslog >/dev/null 2>&1 || true
        fi
    endscript
    # Add a prerotate script to ensure the file exists and has correct permissions before rotation
    prerotate
        if [ ! -f /usr/local/var/log/suricata/hardn-xdr.log ]; then
            mkdir -p /usr/local/var/log/suricata
            touch /usr/local/var/log/suricata/hardn-xdr.log
        fi
        chmod 640 /usr/local/var/log/suricata/hardn-xdr.log
        chown root:adm /usr/local/var/log/suricata/hardn-xdr.log
    endscript
}
EOF

    chmod 644 /etc/logrotate.d/hardn-xdr
    HARDN_STATUS "pass" "Logrotate configuration created/updated."
    return 0
}

# Function to restart rsyslog and apply changes
restart_rsyslog() {
        HARDN_STATUS "info" "Restarting rsyslog service to apply configuration changes..."

        if systemctl restart rsyslog; then
            HARDN_STATUS "pass" "Rsyslog service restarted successfully."
            return 0
        else
            HARDN_STATUS "error" "Failed to restart rsyslog service. Manual check required."
            return 1
        fi
}

# Function to create symlinks for easier access
create_log_symlinks() {
        HARDN_STATUS "info" "Creating symlink /var/log/hardn-xdr.log..."

        ln -sf /usr/local/var/log/suricata/hardn-xdr.log /var/log/hardn-xdr.log
        HARDN_STATUS "pass" "Symlink created at /var/log/hardn-xdr.log."
        return 0
}

# Main function to set up central logging
setup_central_logging() {
        HARDN_STATUS "info" "Setting up central logging for security tools..."

        # Execute each step in sequence, checking for failures
        install_logging_packages || return 1
        setup_log_directories
        configure_rsyslog
        configure_logrotate
        restart_rsyslog
        create_log_symlinks

        HARDN_STATUS "pass" "Central logging setup complete. All security logs will be collected in /usr/local/var/log/suricata/hardn-xdr.log"
        return 0
}

# Execute the main function if this script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    setup_central_logging
fi
